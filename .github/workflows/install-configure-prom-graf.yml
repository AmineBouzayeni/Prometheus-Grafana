name: Install and configure Prometheus and Grafana in the GKE cluster
run-name: Install and configure Prometheus and Grafana in the GKE cluster
on: [push]
  # push:
  #   branches:
  #     - 'main'
env:
  CLUSTER_NAME: dockercoins-cluster-teo
  CLUSTER_ZONE: europe-west1-b
  PROJECT_NAME: teolia-school-devops
  GRAFANA_PORT: 30008
jobs:
    InstallConfigurePromGraf:
        name: Install and configure Prometheus and Grafana
        runs-on: ubuntu-latest
        permissions: write-all
        steps:
            - name: Checkout repo
              uses: actions/checkout@master
            - name: Create Release
              id: create_release
              uses: actions/create-release@latest
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
              with:
                tag_name: ${{ vars.CURRENT_VERSION }}
                release_name: Release ${{ vars.CURRENT_VERSION }}
                body: |
                  Datadog release ${{ vars.CURRENT_VERSION }}.
                draft: false
                prerelease: false
            - name: Install gcloud authentication plugin
              run: |
                REPO_URL="https://packages.cloud.google.com/apt"
                echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] $REPO_URL cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list >/dev/null
                curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

                sudo apt-get update -y
                sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

            - name: Authenticate to Google Cloud
              uses: 'google-github-actions/auth@v1'
              with:
                credentials_json: '${{ secrets.GCLOUD_KEY }}'
                token_format: 'access_token'

            - name: Authenticate to GKE cluster
              run: |   
                gcloud container clusters get-credentials \
                ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }} --project ${{ env.PROJECT_NAME }}
            - name: Install helm
              run : |
                curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
                chmod 700 get_helm.sh
                ./get_helm.sh
            - name: Replace points by dashes in release string
              id: release
              run: |
                currentVersion=$(echo ${{ vars.CURRENT_VERSION }} | sed 's/\./-/g')
                echo "currentVersion=$(echo $currentVersion)" >> $GITHUB_OUTPUT
            - name: Install & configure Prometheus
              run: |
                # Add repo
                helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                helm repo update
                # Uninstall previous releases if there is
                if [[ $(helm ls --short --filter 'prometheus' | grep -c prometheus) != 0 ]]
                    then
                      helm ls --short --filter 'prometheus' | xargs -L1 helm delete
                else
                  echo "No previous release to uninstall. Continuing."
                fi
                # Install prometheus using prometheus-values.yml file which configures monitoring targets
                helm install prometheus-${{ steps.release.outputs.currentVersion }} -f prometheus-values.yml prometheus-community/prometheus  
            - name: Update admin password, grafana port and release value.
              uses: cschleiden/replace-tokens@v1
              with:
                files: '["./grafana-values.yml", "./grafana-service-ext.yml"]'
                tokenPrefix: __
                tokenSuffix: __
              env:
                ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
                GRAFANA_PORT: ${{ env.GRAFANA_PORT }}
                RELEASE: ${{ steps.release.outputs.currentVersion }}
            - name: Update admin password, grafana ip & port in get-datasource script.
              uses: cschleiden/replace-tokens@v1
              with:
                files: '["./get-datasource-uid.sh"]'
                tokenPrefix: __
                tokenSuffix: __
              env:
                ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
                GRAFANA_IP: ${{ vars.GRAFANA_IP }}
                GRAFANA_PORT: ${{ env.GRAFANA_PORT }}
                DS_NAME: Prometheus
            - name: Get datasource uid
              id: uid
              run: |
                chmod +x ./get-datasource-uid.sh
                datasourceUid=$(./get-datasource-uid.sh)
                echo "datasourceUid=$(echo $datasourceUid)" >> $GITHUB_OUTPUT
            - name: Update UID in dashboard json file.
              uses: cschleiden/replace-tokens@v1
              with:
                files: '["./sample-grafana-dashboard.yml"]'
                tokenPrefix: __
                tokenSuffix: __
              env:
                UID: ${{ steps.uid.outputs.datasourceUid }}   
            - name: Install & configure Grafana
              run: |
                # Add grafana helm repo
                helm repo add grafana https://grafana.github.io/helm-charts
                helm repo update
                # Delete previous release if it exists.
                if [[ $(helm ls --short --filter 'grafana' | grep -c grafana) != 0 ]]
                    then
                      helm ls --short --filter 'grafana' | xargs -L1 helm delete
                else
                  echo "No previous release to uninstall. Continuing."
                fi
                # Install grafana charts with custom values file, mainly setting up admin credentials & configuring dashboard import with sidecar container.
                helm install grafana-${{ steps.release.outputs.currentVersion }} -f grafana-values.yml grafana/grafana
                # Expose grafana with nodePort service
                kubectl apply -f grafana-service-ext.yml
                # Create configMap kv to store dashboard content
                kubectl apply -f sample-grafana-dashboard.yml